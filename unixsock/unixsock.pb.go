// Code generated by protoc-gen-go. DO NOT EDIT.
// source: unixsock.proto

/*
Package unixsock is a generated protocol buffer package.

It is generated from these files:
	unixsock.proto

It has these top-level messages:
	Obj
*/
package unixsock

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Obj struct {
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Obj) Reset()                    { *m = Obj{} }
func (m *Obj) String() string            { return proto.CompactTextString(m) }
func (*Obj) ProtoMessage()               {}
func (*Obj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Obj) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Obj)(nil), "unixsock.Obj")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Compute service

type ComputeClient interface {
	Double(ctx context.Context, in *Obj, opts ...grpc.CallOption) (*Obj, error)
}

type computeClient struct {
	cc *grpc.ClientConn
}

func NewComputeClient(cc *grpc.ClientConn) ComputeClient {
	return &computeClient{cc}
}

func (c *computeClient) Double(ctx context.Context, in *Obj, opts ...grpc.CallOption) (*Obj, error) {
	out := new(Obj)
	err := grpc.Invoke(ctx, "/unixsock.Compute/Double", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Compute service

type ComputeServer interface {
	Double(context.Context, *Obj) (*Obj, error)
}

func RegisterComputeServer(s *grpc.Server, srv ComputeServer) {
	s.RegisterService(&_Compute_serviceDesc, srv)
}

func _Compute_Double_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Obj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).Double(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixsock.Compute/Double",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).Double(ctx, req.(*Obj))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compute_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unixsock.Compute",
	HandlerType: (*ComputeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Double",
			Handler:    _Compute_Double_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unixsock.proto",
}

func init() { proto.RegisterFile("unixsock.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xcd, 0xcb, 0xac,
	0x28, 0xce, 0x4f, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xa4,
	0xb9, 0x98, 0xfd, 0x93, 0xb2, 0x84, 0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73, 0x4a, 0x53, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x98, 0x83, 0x20, 0x1c, 0x23, 0x43, 0x2e, 0x76, 0xe7, 0xfc, 0xdc, 0x82, 0xd2,
	0x92, 0x54, 0x21, 0x35, 0x2e, 0x36, 0x97, 0xfc, 0xd2, 0xa4, 0x9c, 0x54, 0x21, 0x5e, 0x3d, 0xb8,
	0x61, 0xfe, 0x49, 0x59, 0x52, 0xa8, 0xdc, 0x24, 0x36, 0xb0, 0x05, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb9, 0x9c, 0xe1, 0x1b, 0x72, 0x00, 0x00, 0x00,
}
